const rateLimit = require("express-rate-limit");
const cors = require("cors");
require("dotenv").config();
const { ENV } = require("./config");
const path = require("path");
const express = require("express");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const dbConfig = require("../src/config/db");
const { ServerApiVersion } = require("mongodb");
const { specs, swaggerUi } = require("./swagger");
const { stripeWebhook } = require("./resolvers/payment");
const url = dbConfig.url;

const app = express();

app.use(
  "/api-docs",
  swaggerUi.serve,
  swaggerUi.setup(specs, { explorer: true })
);
//stripeWebhook
app.post(
  "/stripe/webhook",
  bodyParser.raw({ type: "application/json" }),
  stripeWebhook
);
app.use(function (err, req, res, next) {
  console.log("error", err);
  if (err.code === "LIMIT_FILE_SIZE") {
    res.send({
      result: "fail",
      error: { code: 1001, message: "File is too big" },
    });
    return;
  }
  next(err);
});

// Serve static assets like /images/logo.png
app.use(express.static(path.join(__dirname, "public")));

// Apply rate limiting to all requests
const limiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 100, // limit each IP to 100 requests per windowMs
  message: {
    result: "fail",
    error: { code: 1000, message: "Too many requests, please try again." },
  },
});

app.use(limiter);
const initRoutes = require("./routes");
const { preloadExchangeRates } = require("./helpers/cache");
app.use(
  bodyParser.json({
    extended: true,
    limit: "500mb",
    parameterLimit: 1000000,
  })
);
app.use(
  bodyParser.urlencoded({
    extended: true,
    limit: "500mb",
    parameterLimit: 1000000,
  })
);

var corsOptions = {
  // origin: "http://localhost:4200",

  origin: ENV === "dev" ? "*" : "*",
  // [
  //     "https://app.francongtech.com/:3001",
  //     "https://elog.francongtech.com/:*",
  //     "https://francongtech.com/:*",
  //     "https://elog.francongtech.com/:*",
  //     "https://app.francongtech.com/:*",
  //     "https://dev-elog-nemfra.netlify.app/:*",
  //     "https://www.francongtech.com/:*",
  //     "https://www.francongtech.com/:3000",
  //     "https://elog.francongtech.com/:3000",
  //     "https://francongtech.com/:3000",
  //     "https://elog.francongtech.com/:3000",
  //     "https://app.francongtech.com/:3000",
  //     "https://dev-elog-nemfra.netlify.app/:3000",
  //     "https://elog.francongtech.com",
  //     "http://localhost:3000",
  //   ],

  exposedHeaders: ["f-version"],
};
app.use(cors(corsOptions));

//adding version to response body
app.use(function (req, res, next) {
  // res.set({ "x-version": process.env.npm_package_version });
  res.append("f-version", process.env.FRONTEND_VERSION);
  // set env to response header
  res.append("X-Env", ENV);

  next();
});

const start = async () => {
  try {
    console.log("start");
    await mongoose.connect(url, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverApi: ServerApiVersion.v1,
    });
    console.log("connected", ENV);
    preloadExchangeRates();
    initRoutes(app);
    const server = app.listen(process.env.PORT || 8080, () => {
      console.log(
        `Server is running.... on port ${
          process.env.PORT || 8080
        } and frontend is on version ${process.env.FRONTEND_VERSION}`
      );
    });

    const sockets = {};
    const io = require("socket.io")(server, {
      cors: {
        origin: "*",
        methods: ["GET", "POST"],
      },
    });

    io.on("connection", (socket) => {
      socket.on("connectInit", (sessionId) => {
        console.log("connectInit", sessionId);

        // The socket ID is stored along with the unique ID generated by the client
        sockets[sessionId] = socket.id;
        // The sockets object is stored in Express so it can be grabbed in a route
        app.set("sockets", sockets);
      });
    });
    //check if socket is connected

    // The io instance is set in Express so it can be grabbed in a route
    app.set("io", io);
    app.set("sockets", sockets);
  } catch (error) {
    console.error(new Date(), "Error Starting Server::", error);
  }
};

start();
